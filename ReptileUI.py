# -*- coding: utf-8 -*-
#
# Form implementation generated from reading ui file 'ReptileUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QStringListModel, QThread, pyqtSignal, QMutex
from PyQt5.QtWidgets import QMessageBox, QApplication, QMainWindow, QInputDialog
from os import listdir
from os.path import join, isfile, isdir
import ReptileTieba

qmut = QMutex()
class myThread(QThread):
    signal1 = pyqtSignal()
    def __init__(self):
        super(myThread,self).__init__()

    def run(self):
        kw, ok1 = QInputDialog.getText(Main, 'Input Dialog', '输入搜索关键字:')
        page, ok = QInputDialog.getText(Main, 'Input Dialog', '输入想要爬取的网站的页数（1-9927）:')
        if kw == '':
            QMessageBox.information(Main, "提示", "关键字不能为空！")
        elif ok:
            pageNum = eval(page)
            if isinstance(pageNum, int) and pageNum >= 1 and pageNum <= 9992:
                try:
                    ReptileTieba.main(kw, pageNum)
                except:
                    QMessageBox.information(Main, "提示", "爬取失败")
                    ui.pushButton.setEnabled(True)
                else:
                    self.signal1.emit()
            else:
                QMessageBox.information(Main, "提示", "输入的值格式不对，请重新输入！！")

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(700, 700)
        Form.setStyleSheet('QWidget{background-color:#66CCFF;}')#设置背景
        #self.desktop = QApplication.desktop()#创建桌面对象
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(150, 10, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 40, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(230, 10, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setGeometry(QtCore.QRect(230, 40, 113, 20))
        self.textEdit.setObjectName("textEdit")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(150, 70, 500, 600))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.listView = QtWidgets.QListView(Form)
        self.listView.setGeometry(QtCore.QRect(0, 70, 141, 211))
        self.listView.setObjectName("listView")

        self.slm = QStringListModel()   # 创建模型对象
        self.slm.setStringList([])      # 给模型赋值
        self.listView.setModel(self.slm)#将模型与试图关联

        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(0, 42, 81, 20))
        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        #信号与槽
        self.pushButton.clicked.connect(lambda : self.startReptile(Form))#爬虫
        self.pushButton_2.clicked.connect(lambda :self.display(Form))#显示图片
        self.pushButton_3.clicked.connect(lambda :self.openfile(Form))#选择文件
        self.listView.doubleClicked.connect(self.delete)        #双击信号是删除
        self.listView.clicked.connect(lambda :self.clickOnce(Form))#单击信号是显示

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def openfile(self,Form):#打开文件
        directory = QtWidgets.QFileDialog.getOpenFileName(Form,'选择文件','E:/','All Files (*);;Image Files (*.png);;Image Files (*.jpg)')#打开文件
        #print(directory)
        #directory 不能是空字符串(可能点击取消按钮) 才能提示
        if directory[0]!='' and self.displayImage(directory[0],Form) == False:
            QMessageBox.information(Form, "提示", "文件打开异常！！")
            self.label.setText('                          图片显示')
        elif directory[0]!='':
            self.appendItem(directory[0])

    def displayImage(self,path,Form):#显示图像
        if os.path.exists(path) and path.endswith('.jpg') or path.endswith('.png'):
            jpg = QtGui.QPixmap(path)  # 创建图片对象
            #jpg.scaled(self.label.width(),self.label.height())
            self.label.setPixmap(jpg)
        else:
            return False

    def delete(self):
        index = self.listView.currentIndex()#获得被选中的行对象
        self.slm.removeRow(index.row())                #删除当前行

    def clickOnce(self,Form):
        index = self.listView.currentIndex()  # 获得被选中的行对象
        if self.displayImage(index.data(),Form) == False:
            QMessageBox.information(Form, "提示", "文件可能被删除了！！")
            self.label.setText('             图片显示')

    def appendItem(self,image_path):
        row = self.slm.rowCount()  # 得到行数
        self.slm.insertRow(row)  # 增加一行
        self.slm.setData(self.slm.index(row), image_path)  # 设置数据

    def display(self,Form):
        image_path = self.textEdit.toPlainText()
        if self.displayImage(image_path,Form) == False:
            QMessageBox.information(Form, "提示", "输入的路径有误，请重新输入！！")
        else:
            self.appendItem(image_path)

    def startReptile(self, Form):
        self.pushButton.setEnabled(False)
        self.thread1 = myThread()
        self.thread1.signal1.connect(self.finish)
        self.thread1.start()

    def finish(self):
        self.serchFileDepthFirst('E:/tiebaimage')
        QMessageBox.information(Main, "提示", "爬取成功！！")
        self.pushButton.setEnabled(True)

    def serchFileDepthFirst(self,dir):
        a_list = listdir(dir)
        for i in a_list[::]:
            p = dir + '/' + i
            if isfile(p) and p.endswith('.png'):
                self.appendItem(p)
            else:
                self.serchFileDepthFirst(p)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "爬图工具"))
        self.pushButton.setText(_translate("Form", "开始爬取"))
        self.pushButton_2.setText(_translate("Form", "显示图片"))
        self.label.setText(_translate("Form", "             图片显示"))
        self.label_2.setText(_translate("Form", "历史记录"))
        self.pushButton_3.setText(_translate("Form", "选择文件"))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    Main = QMainWindow()
    ui = Ui_Form()
    ui.setupUi(Main)
    Main.show()
    sys.exit(app.exec_())